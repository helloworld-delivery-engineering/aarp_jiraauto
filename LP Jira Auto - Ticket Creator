// ==UserScript==
// @name         LP Jira Auto - Ticket Creator
// @namespace    https://jiradc.helloworld.com/
// @version      1.5
// @description  Modification of New Jira Auto - Ticket Creator 3.5.16 to adapt to Loyalty Plus
// @author       Colby Lostutter for the Blue Workstream
// @match        https://jiradc.helloworld.com/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

// V 1.2 - Modified the externalID to hold 50 characters instead of 36. Hid some testing alerts
// V 1.3 - 50 Characters was considered too much - needed to be 36 for points.
//         Set alert to be check externalID is not over 36. Modifying this field, will also update the prizepool and the fulfillmentVendor ID
// V 1.4 - Corrected externalID changer - added new Opp Number - Made Oamoe URL default to TEXT
// V 1.5 - Changes to Ticket BLW-113204


// AVAILABLE MODULES
// WHAT'S RUNNNIG - hightlights which components of Jira Auto that are currently active. Should always be running
// Jira Auto - Ticket Creator
// LP Jira Auto
// Code Table - Creator
// Jira Auto - Verification
// Game UUID - URL Updater



window.addEventListener('load', function() {
    'use strict';


    console.log("Jira Auto is running-console");
    // Create user-visible indication the script is running

    let script_active_notification_div = document.createElement("div");
    let notification_containing_div = document.getElementById("notification_container_div");
    script_active_notification_div.id = "jira_auto_active_notification_div";
    script_active_notification_div.innerHTML = "LP Jira Auto - Ticket Creator";
    script_active_notification_div.style.backgroundColor = "#99bbff";
    script_active_notification_div.style.padding = "5px";
    script_active_notification_div.style.fontSize = "10px";
    script_active_notification_div.style.fontWeight = "bold";
    script_active_notification_div.style.display = "block";
    script_active_notification_div.style.width = "100%";
    notification_containing_div.append(script_active_notification_div);
    document.execCommand('createBtn');

})

/* I tried many different ways to make the automation/verification happen on the first page, but have come to the conclusion it works better in EDIT mode
because some of the fields are not editable unless you are in there - This is an alert suggesting they make changes in there. there are other fields that still need to be added*/
var editButton = document.getElementById('edit-issue');
editButton.addEventListener("click", hooooold);
var statusValue = document.getElementById('status-val').textContent;

console.log('Text;' + statusValue);


//Needs delay to allow fields to load.
function hooooold() {
    var timeout = setTimeout(changeStuff, 1000);
}


// This is the Jira Auto portion that will autofill fields based on entries made to SKU - NAME - VALID DATES
function changeStuff() {

    console.log('totalUpdate about to happen');
    alert("LP Jira Auto - Ticket Creator is running");

    var Name = document.getElementById('customfield_16503');
    var SKU = document.getElementById('customfield_16000');
    var fromDate = document.getElementById('customfield_11113');
    var toDate = document.getElementById('customfield_11112');

    SKU.focus();
    SKU.select();
    //Name.value = "";


    SKU.onchange = totalUpdate;
    Name.onchange = totalUpdate;
    fromDate.onchange = totalUpdate;
    toDate.onchange = totalUpdate;


    function totalUpdate(e) {
        var participantCost = document.getElementById('customfield_19606');
        var Name = document.getElementById('customfield_16503');
        var NameValue = Name.value
        .replace(/[​]/g, '') //Removes invisible characters;
        .replace(/[\u202F\u00A0]/, " ")//Removes Narrow No-Break Space
        Name.value = NameValue.trim();
        var NameTrim = NameValue.trim();
        var SKU = document.getElementById('customfield_16000');
        var SKUValue = SKU.value;
        var SKUTrim = SKU.value.trim();
        let arv = document.getElementById('customfield_13042');
        let externalId = document.getElementById('customfield_19601');
        const goodsId = document.getElementById('customfield_16400');
        const DetailLink = document.getElementById('customfield_18400');
        const DirectURL = document.getElementById('customfield_16516');
        let fulfillmentVendor = document.getElementById('customfield_19614');
        let GameUUID = document.getElementById('customfield_16500');
        //var goodsType = document.getElementById('customfield_17204');
        const TileTitle = document.getElementById('customfield_16504');
        const ImageURL = document.getElementById('customfield_17302');
        const NameDrawer = document.getElementById('customfield_16506');
        const PrizePoolName = document.getElementById('customfield_16800');
        const AEMTitle = document.getElementById('customfield_16506');
        const AEMTileTitle = document.getElementById('customfield_16504');
        let DisplayedSavings = document.getElementById('customfield_16513');
        let DisplayedSavingsValue = DisplayedSavings.value;
        var tag = document.getElementById('customfield_19609');
        var tagValue = tag.options[tag.selectedIndex].value;
        //FROM DATE
        const fromDate = document.getElementById('customfield_11113');
        let fromDateValue = fromDate.value;
        const fromDateDay = fromDateValue.match(/\d{2}(?=\/)|\d{1}(?=\/)/g);
        const fromDateMonth = fromDate.value.replace(/(\s|[^a-zA-Z])/g, "");
        let fromDateYear = fromDate.value.match(/\d+$/);
        //TO DATE
        const toDate = document.getElementById('customfield_11112');
        let toDateValue = toDate.value;
        const toDateDay = toDateValue.match(/\d{2}(?=\/)|\d{1}(?=\/)/g);
        const toDateMonth = toDate.value.replace(/(\s|[^a-zA-Z])/g, "");
        let toDateYear = toDate.value.match(/\d+$/);
        const summary = document.getElementById('summary');
        const nameForSummary = NameValue
        .replace(/[’]/g, "'")
        .replace(/[']/g, "")
        .replace(/[:]/g, "")
        .replace(/ Instant Win Play/gi, '')
        .replace(/ Instant Win/gi, '')
        .replace(/Daily Deal/gi, '')
        .replace(/Extra Credit/gi, '')
        .replace(/Sweepstakes/gi, '')
        .replace(/ eGiftCard/gi, '')
        .replace(/ eGift Card/gi, '')
        .replace(/ E-Gift card/gi, '')
        .replace(/ Gift Card/gi, '')
        .trim();
        const Walmart = /.* Walmart eGift Card/gi;
        const Gap = /Gap eGift Card/g;
        const EGiftSubstring = / eGift Card/gi;
        const EGiftSubstring2 = / E-Gift Card/gi;
        const ItemValueValue = (NameValue.replace(/([a-zA-Z]|\s|\&|[®]|[™]|[’]|[']|[-]|[.]|[:])/g, ''))
        .replace(/1800/g, '')
        .trim();
        const ShortName = NameValue
        .trim()
        .replace(/[$]/gi, '')
        .replace(/[’]/g, "'")
        .replace(/[0-9]/g, '')
        .replace(/ Instant Win Play/gi, ' Instant Win')
        .replace(/Daily Deal/gi, '')
        .replace(/Extra Credit/gi, '')
        .replace(/\s+$/, '')
        .trim();
        let TransNameValue = NameValue
        .replace(EGiftSubstring, ' Gift Card')
        .replace(EGiftSubstring2, ' Gift Card')
        .replace(/[^\w\s]/gi, '')
        .replace(/[0-9]/g, '')
        .replace(/[-]|[’]|[.]|[“]|[”]|[®]|[™]/gi, '')
        .replace(/[é]/gi, 'e')
        .toLowerCase()
        .replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function(match, index) {
            if (+match === 0) return "";
            return index === 0 ? match.toLowerCase() : match.toUpperCase();
        })
        .replace(/\s/g, "");
        const TransNameCamel = TransNameValue[0] + TransNameValue.substring(1);
        const TransactionNameValue = TransNameCamel.value;
        const TransNameLower = TransNameCamel.toLowerCase();
        const NewTransNameCamel = TransNameLower
        .replace(/InstantWinPlay/gi, 'IW')
        .replace(/InstantWin/gi, 'IW')
        .replace(/DailyDeal/gi, 'DD')
        .replace(/ExtraCredit/gi, 'EC')
        .replace(/Sweepstakes/gi, 'Sweeps')
        .replace(/GiftCardSweeps/gi, 'Sweeps')
        .replace(/DigitalReward/gi, '');

        var prizePoolItemName = NameValue
        .replace(/e-/gi,'')
        .replace(/egift /gi,'gift')
        .replace(/[0-9]/g, '')
        .replace(/[-]|[’]|[.]|[,]|[“]|[”]|[‘]|[®]|[$]|[™]|[:]|[*]/gi, '')
        .replace(/&/, "")
        .replace(/  /, "")
        .replace(/[é]/g, "e")
        .replace(/[’]/g, "'")
        .replace(/[']/g, "")
        .replace(/ Instant Win Play/gi, '')
        .replace(/ Instant Win/gi, '')
        .replace(/Daily Deal/gi, '')
        .replace(/Extra Credit/gi, '')
        .replace(/Sweepstakes/gi, '')
        //.replace(/egift/gi, 'gift')
        .trim();

        //NOTES if points dont do total of savings (arv minus cost) and percentage but make savings match arv for points



        //SKU CHECKER

        let skuChecker = SKUValue.substring(0, 2);
        var whichRewardType;
        var fulfillmentType = '';
        var externalID1;

        if (skuChecker == 10 || skuChecker < 11) {
            whichRewardType = 'isPOPointsPreloadedURLDigitalItemType';
            externalID1 = 1;
            var isPOPointsPreloadedURLDigitalItemType = 1;
        }
        else if (skuChecker == 11 || skuChecker < 12) {
            whichRewardType = 'isContributions';
            externalID1 = 1;
            var isContributions = 1; //
        }
        else if (skuChecker == 12 || skuChecker < 13) {
            whichRewardType = 'isDDHistoric';
            var isDDHistoric = 1;
        }
        else if (skuChecker == 13 || skuChecker < 14) {
            whichRewardType = 'isPOIncommPointsDigitalItemType';
            var isPOIncommPointsDigitalItemType = 1;
        }
        //NEW
        else if (skuChecker == 14 || skuChecker < 15) {
            whichRewardType = 'isDDIncommPurchaseDigitalRewardType';
            var isDDIncommPurchaseDigitalRewardType = 1;
        }
        else if (skuChecker == 15 || skuChecker < 16) {
            whichRewardType = 'isPointsPreloadedCodeDigitalItemType';
            var isPointsPreloadedCodeDigitalItemType = 1;
        }
        else if (skuChecker == 16 || skuChecker < 17) {
            whichRewardType = 'isPointsPreloadedCodeNonSavingsDigitalItemType';
            var isPointsPreloadedCodeNonSavingsDigitalItemType = 1;
        }
        else if (skuChecker == 17 || skuChecker < 20) {
            whichRewardType = 'isPointsPreloadedSameCodeDigitalItemType';
            var isPointsPreloadedSameCodeDigitalItemType = 1;
        }
        else if (skuChecker == 20 || skuChecker < 29) {
            whichRewardType = 'isSureShipPhysicalItems';
            var isSureShipPhysicalItems = 1;
        }
        else if ((skuChecker == 30 || skuChecker < 40)) {
            whichRewardType = 'isIW';
            var isIW = 1;
        }
        else if ((skuChecker == 40 || skuChecker < 42)) {
            whichRewardType = 'isDigitalSweeps';
            var isDigitalSweeps = 1;
        }
        else if ((skuChecker == 42 || skuChecker < 44)) {
            whichRewardType = 'isPhysicalSweeps';
            var isPhysicalSweeps = 1;
        }
        else if ((skuChecker == 44 || skuChecker < 50)) {
            whichRewardType = 'isDigitalSweeps';
            var isDigitalSweeps2 = 1;
        }
        // 55 is gift card promos needs promo at end of externalId and summary needs gcfppromo -
        else if ((skuChecker == 50 || skuChecker < 53)) {
            whichRewardType = 'isGCFPHistoric';
            var isGCFPHistoric = 1;
        }
        else if ((skuChecker == 53 || skuChecker < 55)) {
            whichRewardType = 'isGCFPDigitalItemType';
            var isGCFPDigitalItemType = 1;
        }
        else if ((skuChecker == 55 || skuChecker < 56)) {
            whichRewardType = 'isGCFPPromo';
            var isGCFPPromo = 1;
        }
        else if ((skuChecker == 56 || skuChecker < 57)) {
            whichRewardType = 'isGCFPPreloadedURLDigitalItemType';
            var isGCFPPreloadedURLDigitalItemType = 1;
        }
        else if ((skuChecker == 57 || skuChecker < 60)) {
            whichRewardType = 'isGCFPPreloadedCodeDigitalItemType';
            var isGCFPPreloadedCodeDigitalItemType = 1;
        }//
        else if ((skuChecker == 60 || skuChecker < 70)) {
            whichRewardType = 'isGreetingCards';
            externalID1 = 1;
            var isGreetingCards = 1;
        }
        else if ((skuChecker == 70 || skuChecker < 80)) {
            whichRewardType = 'isPFIBI';
            var isPFIBI = 1;
        }

        else if ((skuChecker == 80 || skuChecker < 81)) {
            whichRewardType = 'isExperiencesDigitalDownloads';
            var isExperiencesDigitalDownloads = 1;
        }
        //
        else if ((skuChecker == 90 || skuChecker < 93)) {
            whichRewardType = 'isECHistoric';
            var isECHistoric = 1;
        }
        //
        else if ((skuChecker == 93 || skuChecker < 96)) {
            whichRewardType = 'isECIncommPurchaseDigitalItemType';
            var isECIncommPurchaseDigitalItemType = 1;
        }
        //
        else if ((skuChecker == 96 || skuChecker < 99)) {
            whichRewardType = 'isECIncommPointsDigitalItemType';
            var isECIncommPointsDigitalItemType = 1;
        }

        //character counter for externalID
        if ((isPOPointsPreloadedURLDigitalItemType ||
             isPointsPreloadedCodeDigitalItemType ||
             isPointsPreloadedCodeNonSavingsDigitalItemType ||
             isGCFPPreloadedURLDigitalItemType ||
             isGCFPPreloadedCodeDigitalItemType )) {

            var fulfillmentVendorCharLimit = 1;
        }

        //INCOMM Fulfillment Vendor ID
        if ((isPOIncommPointsDigitalItemType ||
             isDDIncommPurchaseDigitalRewardType ||
             isECIncommPurchaseDigitalItemType ||
             isECIncommPointsDigitalItemType ||
             isGCFPDigitalItemType ||
             isGCFPPromo )) {

            var fulfillmentVendorId = 1;
            //fulfillmentVendor.value = 'NEEDS INCOMM ID';
        }



        console.log(whichRewardType);

        const rewardType = document.getElementById('customfield_19701');
        var rewardTypeValue = rewardType.options[rewardType.selectedIndex].value;
        var rewardTypeSelected = rewardType.options[rewardType.selectedIndex].text;

        const itemType = document.getElementById('customfield_19705');
        var itemTypeValue = itemType.options[itemType.selectedIndex].value;
        var itemTypeSelected = itemType.options[itemType.selectedIndex].text;


        //TYPE OF ITEM
        var typeOfItem = "";
        var externalIdEnd = "";

        if (isIW) {
            typeOfItem = "IW";
            rewardType.selectedIndex = 8;
            itemType.selectedIndex = 16;
            externalIdEnd = "iw";
        }
        else if (isPhysicalSweeps) {
            typeOfItem = "Sweeps - Physical";
            externalIdEnd = "sweeps";
            rewardType.selectedIndex = 9;
            itemType.selectedIndex = 19;
        }
        else if (isDigitalSweeps) {
            typeOfItem = "Sweeps";
            externalIdEnd = "sweeps";
            rewardType.selectedIndex = 9;
            itemType.selectedIndex = 20;
        }
        else if (isDigitalSweeps2) {
            typeOfItem = "Sweeps";
            externalIdEnd = "sweeps";
            rewardType.selectedIndex = 9;
            itemType.selectedIndex = 20;
        }
        else if (isPOPointsPreloadedURLDigitalItemType) {
            typeOfItem = "PO"
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 6;
        }
        else if (isContributions) {
            typeOfItem = "Contribution"
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 3;
        }
        else if (isDDHistoric) {
            typeOfItem = "DD";
            externalIdEnd = "dd";
            rewardType.selectedIndex = 1;
            itemType.selectedIndex = 11;
        }
        else if (isDDIncommPurchaseDigitalRewardType) {
            typeOfItem = "DD";
            externalIdEnd = "dd";
            rewardType.selectedIndex = 1;
            itemType.selectedIndex = 2;
        }
        else if (isPointsPreloadedCodeDigitalItemType) {
            typeOfItem = "PO";
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 7;
        }
        else if (isPointsPreloadedCodeNonSavingsDigitalItemType) {
            typeOfItem = "PO";
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 8;
        }
        else if (isPointsPreloadedSameCodeDigitalItemType) {
            typeOfItem = "PO";
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 9;
        }
        else if (isSureShipPhysicalItems) {
            typeOfItem = "Physical";
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 10;
        }
        else if (isGCFPHistoric) {
            typeOfItem = "GCFP"
            rewardType.selectedIndex = 6;
            itemType.selectedIndex = 0;
        }
        else if (isGCFPDigitalItemType) {
            typeOfItem = "GCFP"
            rewardType.selectedIndex = 6;
            itemType.selectedIndex = 2;
        }
        else if (isGCFPPromo) {
            typeOfItem = "GCFP"
            rewardType.selectedIndex = 6;
            itemType.selectedIndex = 0;
        }
        else if (isGCFPPreloadedURLDigitalItemType) {
            typeOfItem = "GCFP"
            rewardType.selectedIndex = 6;
            itemType.selectedIndex = 11;
        }
        else if (isGCFPPreloadedCodeDigitalItemType) {
            typeOfItem = "GCFP"
            rewardType.selectedIndex = 6;
            itemType.selectedIndex = 11;
        }
        else if (isGreetingCards) {
            typeOfItem = "E-Greeting Card";
            //externalIdEnd = "egreetingcard";
            rewardType.selectedIndex = 2;
            itemType.selectedIndex = 4;
        }
        else if (isPFIBI) {
            typeOfItem = "PFIBI";
            externalIdEnd = "isPFBI";
            rewardType.selectedIndex = 2;
            itemType.selectedIndex = 4;
        }
        else if (isExperiencesDigitalDownloads) {
            typeOfItem = "Digital Download"
            rewardType.selectedIndex = 2;
            itemType.selectedIndex = 4;
        }


        else if (isECHistoric) {
            typeOfItem = "EC";
            externalIdEnd = "ec";
            rewardType.selectedIndex = 4;
            itemType.selectedIndex = 2;
        }
        else if (isECIncommPurchaseDigitalItemType) {
            typeOfItem = "EC Purchase"
            externalIdEnd = "ec";
            rewardType.selectedIndex = 5;
            itemType.selectedIndex = 2;
        }
        else if (isECIncommPointsDigitalItemType) {
            typeOfItem = "EC Points"
            externalIdEnd = "ec";
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 1;
        }
        else if (isPOIncommPointsDigitalItemType) {
            typeOfItem = "PO"
            rewardType.selectedIndex = 3;
            itemType.selectedIndex = 1;
        }
        else {
            typeOfItem = "Needs to be determined"
            rewardType.selectedIndex = 0;
            itemType.selectedIndex = 0;
        }



        // START AND END DATES CLEAR //
        /*
        var startDate = document.getElementById('customfield_11113');
        var endDate = document.getElementById('customfield_11112');

        startDate.value = "";
        endDate.value = "";
        */

        // AEM TITLES
        if (isIW) {
            AEMTileTitle.value = ShortName + "*";
            AEMTitle.value = ShortName + "*";
        }

        else if (isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            AEMTileTitle.value = NameValue.trim() + "*";
            AEMTitle.value = NameValue.trim() + "*";
        }
        else {
            AEMTileTitle.value = ShortName;
            AEMTitle.value = ShortName;
        }

        const NewTransNameLower = NewTransNameCamel.toLowerCase();
        var externalIdName = prizePoolItemName
        .replace(/&/gi, "")
        .toLowerCase()
        .replace(/\s/g, "")
        .replace(/aarpfoundationpointscontribution/g, '');
        console.log(prizePoolItemName + externalIdEnd);
        let externalIdValue = SKUValue + externalIdName + externalIdEnd
        .replace(/&/gi, "")
        .trim();
        const NewURL = externalIdValue;
        const SweepsFinder = NewURL.substring(0, 1);
        var availability = document.getElementById('customfield_19616');
        let ParticipantCost = document.getElementById('customfield_16512');
        var lowWatermark = document.getElementById('customfield_17206');
        var supplier = document.getElementById('customfield_17301');
        var fulfillment = document.getElementById('customfield_17002-1');
        var codeFormatURL = document.getElementById('customfield_17007');
        var filterTags = document.getElementById('customfield_16401');
        var filterTagsValue = filterTags.value;
        var digitalCodeSiteURL = document.getElementById('customfield_17802');
        var projectNumber = document.getElementById('customfield_19615');
        var brandName = document.getElementById('customfield_16001');
        var brandNameValue = nameForSummary
        .replace(/[0-9]/g, '')
        .replace(/[’]|[.]|[“]|[”]|[$]|[®]|[™]/gi, '')
        .replace(/[é]/gi, 'e');


        NameValue = NameTrim;

        //CHECK THIS: goodsId.value = "";

        //DetailLink.value = "https://aarp-rewards.promo.eprize.com/api/v3/goods/" + externalIdValue + "/detail/";

        //Primary ID Creator
        externalId.value = externalIdValue;


        const externalIdInput = document.getElementById('customfield_19601');



        //External ID Change Updates the Direct URL and Detail Link
        var externalIdCurrent = document.getElementById('customfield_19601');
        var externalIdCurrentValue = externalIdCurrent.value;
        var existingDetailLink = document.getElementById('customfield_18400');
        externalIdCurrent.onchange = updateURL;
        function updateURL(e) {
            var updatedDirectURL = document.getElementById('customfield_16516');
            var updatedDetailLink = document.getElementById('customfield_18400');
            var externalIdNew = document.getElementById('customfield_19601');
            updatedDirectURL.value = "https://www.aarp.org/rewards/redeem/" + SKU.value + externalIdNew.value;
            updatedDetailLink.value = "https://aarp-rewards.promo.eprize.com/api/v3/goods/" + externalIdNew.value + "/detail/";
            var UpdatePrizePoolName = document.getElementById('customfield_16800');
            UpdatePrizePoolName.value = externalIdNew.value;
        }



        //ADDS content to field if it isn't already filled because of a clone
        if (ImageURL.value.length < 61) {
            ImageURL.value = "https://cdn.aarp.net/content/dam/aarp/rewards/redeem/catalog/";
        }

        ImageURL.onchange = imageURLTrim;
        function imageURLTrim(e) {
            var ImageURLValue = ImageURL.value.replace(/ /, "")
            .trim();
            ImageURL.value = ImageURLValue;
        }

        //Direct URL creator
        if (isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            DirectURL.value = 'https://www.aarp.org/rewards/redeem/sweeps/' + NewURL + '/';
        }
        else if (isECIncommPointsDigitalItemType || isECIncommPurchaseDigitalItemType || isECHistoric) {
            DirectURL.value = 'https://www.aarp.org/rewards/redeem/' + NewURL + 'ec/';
        }
        else {
            DirectURL.value = 'https://www.aarp.org/rewards/redeem/' + externalIdValue + '/';
        }


        arv.value = ItemValueValue;




        /*
        if (isIW || isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            let fulfillmentVendor = document.getElementById('customfield_19614');

            alert(externalIdEnd + "yes");

            var fulfillmentVendorValue = fulfillmentVendor.value;
            fulfillmentVendorValue = "TBD";

            alert(fulfillmentVendorValue);



            if (fulfillmentVendor.length > 3) {
                fulfillmentVendor.value = "";
                fulfillmentVendor.value = "TBD";
            }
            else if (fulfillmentVendor.value == "TBD") {
                //alert(TBDoverride);
                var UUIDTBD = 1;
            }

            var UUIDTrim = fulfillmentVendor.value.trim();

            fulfillmentVendor.value = UUIDTrim;
            NameValue = NameTrim;
            SKU.value = SKUTrim;

        }
     */

        fulfillmentVendor.value = '';

        var externalIdLP = externalId.value
        .replace(/[-]/g, '');

        if (externalID1){
            //alert(externalIdLP);
            fulfillmentVendor.value = externalIdLP;
        }
        else if (fulfillmentVendorId) {
            fulfillmentVendor.value = 'NEEDS INCOMM ID'}

        else {
            fulfillmentVendor.value = "TBD";
        }
        console.log(externalId.value);
        console.log(externalIdLP);

        //brandName.value = brandNameValue;

        var constrainDate = document.getElementById('customfield_18600');
        constrainDate.value = "";

        if (isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            constrainDate.value = ("5/" + fromDateMonth + "/" + fromDateYear);
        }

        if (isIW || isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            PrizePoolName.value = (externalId.value);
        }
        else {
            PrizePoolName.value = '';
        }

        //REWARDS DEPLOY PATH CREATOR
        var SN = fromDateMonth;
        var Q = "";
        var sQ = "";

        if (SN == "Jan" || SN == "Feb" || SN == "Mar") {
            Q = "q1";
        }
        else if (SN == "Apr" || SN == "May" || SN == "Jun") {
            Q = "q2";
        }
        else if (SN == "Jul" || SN == "Aug" || SN == "Sep") {
            Q = "q3";
        }
        else if (SN == "Oct" || SN == "Nov" || SN == "Dec") {
            Q = "q4";
        }




        //This sets the OAMOE URL
        const OamoeURL = document.getElementById('customfield_16517');
        if (isIW) {
            OamoeURL.value = "https://www.tobefilledoutlater.biz";
        }




        console.log(itemTypeValue);



        //DISCLOSURE UPDATE

        var disclosureCopy = document.getElementById('customfield_19612');
        var monthNumber = '';
        var pertinentMonth = "";
        var pertinentDay = "";
        var pertinentYear = "";

        //DATE CHECKER
        if (isIW) {
            pertinentMonth = toDateMonth;
            pertinentDay = toDateDay;
            pertinentYear = toDateYear;
        }
        else if (isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            pertinentMonth = fromDateMonth;
            pertinentDay = fromDateDay;
            pertinentYear = fromDateYear;
        }

        var lastDayOfMonth = "";
        if (pertinentMonth == "Feb") {
            lastDayOfMonth = "28";
        }
        else if (pertinentMonth == "Apr" | pertinentMonth == "Jun" | pertinentMonth == "Sep" | pertinentMonth == "Nov") {
            lastDayOfMonth = "30";
        }
        else {
            lastDayOfMonth = "31"
        }

        var fullMonth = '';
        var fromMonth = '';
        var toMonth = '';


        if (pertinentMonth === "Jan") {
            fullMonth += "January";
            monthNumber += "1";
        }
        if (pertinentMonth === "Feb") {
            fullMonth += "February";
            monthNumber += "2";
        }
        if (pertinentMonth === "Mar") {
            fullMonth += "March";
            monthNumber += "3";
        }
        if (pertinentMonth === "Apr") {
            fullMonth += "April";
            monthNumber += "4";
        }
        if (pertinentMonth === "May") {
            fullMonth += "May";
            monthNumber += "5";
        }
        if (pertinentMonth === "Jun") {
            fullMonth += "June";
            monthNumber += "6";
        }
        if (pertinentMonth === "Jul") {
            fullMonth += "July";
            monthNumber += "7";
        }
        if (pertinentMonth === "Aug") {
            fullMonth += "August";
            monthNumber += "8";
        }
        if (pertinentMonth === "Sep") {
            fullMonth += "September";
            monthNumber += "9";
        }
        if (pertinentMonth === "Oct") {
            fullMonth += "October";
            monthNumber += "10";
        }
        if (pertinentMonth === "Nov" || summaryMonth === "Nov") {
            fullMonth += "November";
            monthNumber += "11";
        }
        if (pertinentMonth === "Dec") {
            fullMonth += "December";
            monthNumber += "12";
        }

        //SUMMARY MONTH SET

        var summaryMonth = fromDateMonth;
        var summaryMonthNumber = '';

        if (summaryMonth === "Jan") {
            summaryMonthNumber += "1";
        }
        if (summaryMonth === "Feb") {
            summaryMonthNumber += "2";
        }
        if (summaryMonth === "Mar") {
            summaryMonthNumber += "3";
        }
        if (summaryMonth === "Apr") {
            summaryMonthNumber += "4";
        }
        if (summaryMonth === "May") {
            summaryMonthNumber += "5";
        }
        if (summaryMonth === "Jun") {
            summaryMonthNumber += "6";
        }
        if (summaryMonth === "Jul") {
            summaryMonthNumber += "7";
        }
        if (summaryMonth === "Aug") {
            summaryMonthNumber += "8";
        }
        if (summaryMonth === "Sep") {
            summaryMonthNumber += "9";
        }
        if (summaryMonth === "Oct") {
            summaryMonthNumber += "10";
        }
        if (summaryMonth === "Nov") {
            summaryMonthNumber += "11";
        }
        if (summaryMonth === "Dec") {
            summaryMonthNumber += "12";
        }



        //Disclosure Date Setter
        var thisMonth = "";

        if (thisMonth == "Feb") {
            lastDayOfMonth = "28";
        }
        else if (thisMonth == "Apr" | thisMonth == "Jun" | thisMonth == "Sep" | thisMonth == "Nov") {
            lastDayOfMonth = "30";
        }
        else {
            lastDayOfMonth = "31"
        }

        var readableDate = "";

        readableDate = (fullMonth + ' ' + toDateDay +', 20'+toDateYear);






        /// THIS IS THE SUMMARY SECTION WHICH NEEDS TO BE DISCUSSED/////


        /*
*/
        var inventory = document.getElementById('customfield_16101');
        var inventoryValue = inventory.value;
        var summaryValue = summaryMonthNumber + "/" + fromDateDay + " | " + typeOfItem + " | " + nameForSummary + ", " + SKUValue;

        //NEEDS TO ACCOMODATE FOR SUPER PLAY

        if ((isIW && inventoryValue >= 126)) {
            summary.value = summaryValue + " *SUPER PLAY*";
        }
        else {
            summary.value = summaryValue;
        }

        /*
        inventory.addEventListener("change", IWsummaryUpdate);
        function IWsummaryUpdate() {
            var inventory = document.getElementById('customfield_16101');
            var inventoryValue = inventory.value;
            var summary = document.getElementById('summary');
            var summaryValue = summaryMonthNumber + "/" + fromDateDay + " | " + typeOfItem + " | " + nameForSummary + ", " + SKUValue;


            if ((isIW && inventoryValue >= 126)) {
                summary.value = summaryValue + " *SUPER PLAY*";
            }
            else {
                summary.value = summaryValue;
            }



            alert('iwsummary');
        }
*/

        //Auto LOW WATERMARK

        // Can you automatically make the low watermark 20% of the inventory amount?
        // Applied to everything besides sweepstakes, iw, contribution, code items (low watermark will be 10)

        // var inventory = document.getElementById('customfield_16101');












        console.log(typeOfItem, SKUValue); //CONSOLE LOG


        let retailValue = document.getElementById('customfield_13042');
        let retailValueNum = retailValue.value

        if (isDDHistoric || isDDIncommPurchaseDigitalRewardType) {
            if (retailValue.length == 1 ) {
                disclosureCopy.value = '<p>*New offer available to the first 150 AARP Rewards members (50 U.S. (D.C.)) each weekday (Monday through Friday) while supplies last. You may only purchase this gift card one time. You may purchase up to 5 gift cards per month. Fulfilled as a digital gift code. This digital gift card is non-refundable. In some instances delivery may take longer than 24 hours. </p>'
            }
            else {
                disclosureCopy.value = '<p>*New offer available to the first 150 AARP Rewards members (50 U.S. (D.C.)) each weekday (Monday through Friday) while supplies last. You may only purchase this gift card one time. You may purchase up to 5 gift cards per month. Fulfilled as a digital gift code. This digital gift card is non-refundable. In some instances delivery may take longer than 24 hours. </p>';
            }
        }

        // IW - SWEEPS ABSOLUTES

        // REWARDS TYPE SELECTOR
        // DISPLAYED SAVINGS
        // IW CLIENT
        // Availability
        // PARTICIPANT COST
        // Low Watermark
        // GOODS TYPE
        // FULFILLMENT
        // AEM FILTER TAGS
        // codeformat is URL




        if (isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {
            var sweepsfilterTagsSelected = '';
            sweepsfilterTagsSelected = filterTags.options[filterTags.selectedIndex];
            rewardType.selectedIndex = 9;
            DisplayedSavings.value = "0";
            //rewardClient.selectedIndex = 1;
            //supplier.selectedIndex = 1;
            //ParticipantCost.value = "";
            //rewardsType.selectedIndex = 4;
            //lowWatermark.value = "0";
            /////fulfillment.checked = true;
            //codeFormatURL.selectedIndex = 1;
            document.getElementById('customfield_16401').setAttribute("multiple", "multiple");


            //DESELECTING FILTERS
            filterTags.options[0].selected = false;
            filterTags.options[1].selected = false;
            filterTags.options[2].selected = false;
            filterTags.options[3].selected = false;
            filterTags.options[4].selected = false;
            filterTags.options[5].selected = false;
            filterTags.options[6].selected = false;
            filterTags.options[7].selected = false;
            filterTags.options[8].selected = false;
            filterTags.options[9].selected = false;
            filterTags.options[10].selected = false;
            filterTags.options[12].selected = false;
            filterTags.options[13].selected = false;
            filterTags.options[14].selected = false;
            filterTags.options[15].selected = false;
            filterTags.options[17].selected = false;

            filterTags.options[16].setAttribute("selected", "selected");
            filterTags.options[11].setAttribute("selected", "selected");
            disclosureCopy.value = '<p>*No Points Necessary. See <a title="Hyperlink to the Official Rules" href="https://www.aarp.org/about-aarp/rewards-terms-and-conditions/sweeps-rules/" target="_blank">*Official Rules</a> for alternate method of entry, odds and all details. Void where prohibited. Must enter by ' + readableDate + ' at 11:59 p.m. ET. Limit 10 entries per day per person. Open only to AARP Rewards participants who reside in the 50 U.S. (D.C.). Void in PR, Guam and the USVI. </p>';
        }
        if (isIW) {
            var iwfilterTagsSelected = '';

            iwfilterTagsSelected = filterTags.options[filterTags.selectedIndex].text;
            rewardType.selectedIndex = 8;
            DisplayedSavings.value = "0";
            //rewardClient.selectedIndex = 1;
            //ParticipantCost.value = "50";
            //goodsType.selectedIndex = 3;
            //supplier.selectedIndex = 1;
            availability.selectedIndex = 2;
            //lowWatermark.value = "0";
            //fulfillment.checked = true;
            //codeFormatURL.selectedIndex = 1;
            //digitalCodeSiteURL.value = "";
            document.getElementById('customfield_16401').setAttribute("multiple", "multiple");

            //DESELECTING FILTERS
            filterTags.options[0].selected = false;
            filterTags.options[1].selected = false;
            filterTags.options[2].selected = false;
            filterTags.options[3].selected = false;
            filterTags.options[4].selected = false;
            filterTags.options[6].selected = false;
            filterTags.options[7].selected = false;
            filterTags.options[8].selected = false;
            filterTags.options[9].selected = false;
            filterTags.options[12].selected = false;
            filterTags.options[13].selected = false;
            filterTags.options[14].selected = false;
            filterTags.options[15].selected = false;
            filterTags.options[17].selected = false;

            filterTags.options[10].setAttribute("selected", "selected");
            filterTags.options[5].setAttribute("selected", "selected");
            filterTags.options[16].setAttribute("selected", "selected");
            filterTags.options[11].setAttribute("selected", "selected");
            disclosureCopy.value = '<p>*No Points Necessary. See <a title="Hyperlink to the Official Rules" href="https://www.aarp.org/about-aarp/rewards-terms-and-conditions/instant-win-rules/" target="_blank">Official Rules</a> for alternate method of entry, odds and all details. Must enter by ' + readableDate + ' at 11:59 p.m. ET. Void where prohibited. Limit 1 play each &ldquo;Day&rdquo; (defined as 12:00 a.m. ET through 11:59 p.m. ET) per person. Open only to AARP Rewards participants who reside in the 50 U.S. (D.C.). Void in PR, Guam and the USVI.</p>';
        }




        inventory.addEventListener("change", autoLow);
        function autoLow() {
            var itemType = document.getElementById('customfield_19705');
            var itemTypeValue = itemType.value;
            var inventory = document.getElementById('customfield_16101');
            var lowWatermark = document.getElementById('customfield_19607');

            console.log(itemTypeValue);
            console.log(inventory.value);
            console.log(lowWatermark.value);

            if (itemType = '21728' || '21729' || '21742' || '21741' || '22201' || '21733' || '21734' || '21735' || '21738') {
                lowWatermark.value = (inventory.value / 10);
                alert(itemTypeValue);
            }

            else if (itemType = '22502' || '22500') {
                lowWatermark.value = '0';
                alert(itemTypeValue);
            }
            else {
                lowWatermark.value = (inventory.value / 5);
                alert(itemTypeValue);
            }

            var summary = document.getElementById('summary');
            var summaryValue = summaryMonthNumber + "/" + fromDateDay + " | " + typeOfItem + " | " + nameForSummary + ", " + SKUValue;


            if ((isIW && inventoryValue >= 126)) {
                summary.value = summaryValue + " *SUPER PLAY*";
            }
            else {
                summary.value = summaryValue;
            }


        }


        let RewardsDeploy = document.getElementById('customfield_17001');
        let RewardsDeployValue = RewardsDeploy.value;

        if (isIW) {


            //projectNumber.value = '261779';
            //RewardsDeploy.value = "aarp/25q3instantwin";

            RewardsDeploy.value = ("aarp/" + fromDateYear + Q + "instantwin");


        }
        else if (isPhysicalSweeps || isDigitalSweeps || isDigitalSweeps2) {

            //projectNumber.value = '261780';

            if ((Q == "q1" || Q == "q2")) {
                sQ = 'q1q2';
            }
            else {
                sQ = 'q3q4'
            }
            RewardsDeploy.value = ("aarp/" + fromDateYear + sQ + "sweepstakes");
        }


        if (RewardsDeploy.value == "aarp/24q3q4sweepstakes") {
            projectNumber.value = '259974';
        }
        else if (RewardsDeploy.value == "aarp/25q1q2sweepstakes") {
            projectNumber.value = '261091';
        }
        else if (RewardsDeploy.value == "aarp/25q3q4sweepstakes") {
            projectNumber.value = '261780';
        }
        else if (RewardsDeploy.value == "aarp/25q1instantwin") {
            projectNumber.value = '261090';
        }
        else if (RewardsDeploy.value == "aarp/25q3instantwin") {
            projectNumber.value = '261779';
        }


        console.log(RewardsDeployValue);



    }

    //*************************END OF TOTAL UPDATE******************************




    //Code Format is URL Setter  BASED ON DIGITAL OR PHYSICAL

    var sweepstakesPrizeType = document.getElementById('customfield_17610');
    sweepstakesPrizeType.onchange = codeFormatCheck;

    function codeFormatCheck() {
        var sweepstakesPrizeTypeValue = sweepstakesPrizeType.selectedIndex;
        var codeFormat = document.getElementById('customfield_17007');

        if (sweepstakesPrizeTypeValue == "1") {
            var codeFormatYes = codeFormat.selectedIndex = 1;
        }
        else {
            var codeFormatNo = codeFormat.selectedIndex = 2;
            alert('Please make sure to fill out "Digital Code Site URL" field');
        }
    }

    //RETAIL VALUE AUTO UPDATER

    let retailValue = document.getElementById('customfield_13042');
    let retailValueNum = retailValue.value
    .replace(/[$]|[‘]/g, '');
    //CHECK THIS: let ParticipantCost = document.getElementById('customfield_16512');
    //CHECK THIS: let ParticipantCostValue = ParticipantCost.value;
    let DisplayedSavings = document.getElementById('customfield_16513');
    //CHECK THIS: let DisplayedSavingsNum = (retailValueNum - ParticipantCostValue);
    //CHECK THIS: let DisplayedSavingsValue = ('$' + DisplayedSavingsNum);
    let DisplayedDiscount = document.getElementById('customfield_16514');
    //CHECK THIS: let DisplayedDiscountValue = (DisplayedSavingsNum / retailValueNum);
    //CHECK THIS:
    /* let DiscountPercent = Number(DisplayedDiscountValue).toLocaleString(undefined, {
        style: 'percent'
    });
    */
    let participantCost = document.getElementById('customfield_19606');
    let participantCostValue = participantCost.value;


    //CHECK THIS:
    /*
    participantCost.addEventListener("change", pointModifier);
    function pointModifier() {
        let ParticipantCost = document.getElementById('customfield_16512');
        let DisplayedSavings = document.getElementById('customfield_16513');
        let DisplayedDiscount = document.getElementById('customfield_16514');
        let retailValue = document.getElementById('customfield_13042');
        //SKU CHECKER
        let SKUValue = SKU.value;
        let skuChecker = SKUValue.substring(0, 2);
        if ((skuChecker >= 40 && skuChecker <= 49)) {
            var isSweeps = 1;
        }
        else if ((skuChecker >= 30 && skuChecker <= 39)) {
            var isIW = 1;
        }
        ParticipantCost.value = '';
        DisplayedSavings.value = "";
        DisplayedDiscount.value = "";
        if (isIW || isSweeps) {
            DisplayedSavings.value = '0';
        }
        else {
            DisplayedSavings.value = DisplayedSavingsValue;
        }
    }

    ParticipantCost.addEventListener("change", costModifier);
    function costModifier() {
        let retailValue = document.getElementById('customfield_13042');
        let ParticipantCost = document.getElementById('customfield_16512');
        let DisplayedSavings = document.getElementById('customfield_16513');
        let DisplayedDiscount = document.getElementById('customfield_16514');
        let participantCost = document.getElementById('customfield_19606');
        let retailValueNum = retailValue.value
        .replace(/[$]|[‘]/g, '');
        //CHECK THIS: let ParticipantCostValue = ParticipantCost.value;
        //CHECK THIS: let DisplayedSavingsNum = (retailValueNum - ParticipantCostValue);
        //CHECK THIS: let DisplayedDiscountValue = (DisplayedSavingsNum / retailValueNum);
        let DiscountPercent = Number(DisplayedDiscountValue).toLocaleString(undefined, {
            style: 'percent'
        });
        let SKUValue = SKU.value;
        let skuChecker = SKUValue.substring(0, 2);
        if ((skuChecker >= 40 && skuChecker <= 49)) {
            var isSweeps = 1;
        }
        else if ((skuChecker >= 30 && skuChecker <= 39)) {
            var isIW = 1;
        }
        PointsField.value = "";
        DisplayedSavings.value = "";
        if (isIW || isSweeps) {
            DisplayedSavings.value = "0"
        }
        else {
            DisplayedSavings.value = DisplayedSavingsValue;
            DisplayedDiscount.value = DiscountPercent;
        }
    }
    */






    // Issuance ID Creator

    var issuanceId = document.getElementById('customfield_19605');




    issuanceId.addEventListener("change", uuidv41);
    function uuidv41() {

        var issuanceId = document.getElementById('customfield_19605');
        var SKU = document.getElementById('customfield_16000');
        issuanceId.focus();
        if (issuanceId.value.length < 30) {
            //alert('uuid');
            issuanceId.value = "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
                                                                              (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
                                                                             );
            issuanceId.style.backgroundColor = "#00ee00";
            SKU.focus();
        }

        else if (issuanceId.value.length > 20) {
            issuanceId.style.backgroundColor = "#eeaaaa";
            alert('If this Isuuance ID is from a cloned ticket, please delete the number and it will automatically create a new one')};
    }

    console.log(uuidv41());







    var SKUValue = SKU.value;
    let skuChecker = SKUValue.substring(0, 2);
    var externalId = document.getElementById('customfield_19601');

    if (skuChecker == 10 || skuChecker < 11 || skuChecker == 15 || skuChecker < 17 || skuChecker == 56 || skuChecker < 58) {
        var fulfillmentVendorCharLimit = 1;
    }


    Name.addEventListener("change", charLimitCheck);
    SKU.addEventListener("change", charLimitCheck);
    externalId.addEventListener("change", charLimitCheck);

    function charLimitCheck() {
        var externalId = document.getElementById('customfield_19601');
        var fulfillmentVendorId = document.getElementById('customfield_19614');
        //fulfillmentVendorId.value = externalId.value.replace(/[-]/g, '');;
        var exIDLength = externalId.value.length;
        if ((fulfillmentVendorCharLimit == 1 && exIDLength > 36)) {

            alert("External ID is currently " + exIDLength + " it needs to be 36 or less. - Please adjust the EXTERNAL ID so that it reduces it to 36 or less Characters");

            externalId.style.backgroundColor = "#fcd4df";
        }
        else {
            externalId.style.backgroundColor = "#ffffff";
        }
    }




}

